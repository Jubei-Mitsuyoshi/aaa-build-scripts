#!/bin/bash

################ common header identical except for usage, getopts etc #########################################################################################################


Usage() {
  cat <<EOF
usage: ${0##*/} [options] </path/to/pkg/dir.../path/to/pkg/dir>

  -d < distro >
  -d <backport build to selected distro
	kali|stable|testing
	default build is unstable>
  
  -q <supress normal output, just print
  names of files sucsessfully built and 
  processed>
  
  -u <update/create pbuilder immage before
   build>
   
   -c <just check the package for packaging
   correcly ie dpkg-source -b implies no quiet>
   
   -G <git build ie include to git component>
   
  ****repo flags*****
  -l < include built .debs to local repo,
	basedir=aaa_home_repo_dir
	only effective if repo dir set in
	aaa-master-config>
	
  -g <also include .changes into git repo>
	basedir=aaa_git_repo_dir
	only effective if repo dir set in
	aaa-master-config>
  
  -w <also include built .debs into work repo>
	basedir=aaa_work_repo_dir
	distro=work
	only effective if repo dir set in
	aaa-master-config>
   
  This script uses pbuilder and reprepro
  to build the package in the current dir
  result is found at the location
  specified in aaa-master-configure
  as aaa_build_result
  

EOF
}



if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
		exit 1
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "quitting !! "
	exit 1
fi

#source config
if [ -r /etc/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /etc/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master config file quitting"
	exit 1
fi

#source settings
if [ -r $HOME/.aaa_settings ]; then
  Info "found a settings file.. reading it"
  . $HOME/.aaa_settings
fi

####
aaa_component="main"

# get options and arguments http://wiki.bash-hackers.org/howto/getopts_tutorial

while getopts ":d:lgwuqcG" opt; do
  case $opt in
        d) Info "< -d $OPTARG > passed" 
		case $OPTARG in
	kali|stable|testing) Info "-d $OPTARG is valid, building for $OPTARG"
							new_distro="$OPTARG" ;;
					*) Fuck "<-d $OPTARG> is not valid, needs to be <-d kali,stable,unstable,testing or ubuntu>" ;;
		esac ;;
	l) if [[ -z  "$aaa_home_repo_dir" ]]; then
			Warn "/etc/aaa-master-config has no reference for aaa_home_repo_dir"
			Warn "if you continue your home repo will not be used "
			AnyKey
		else
			hrepo=1
		fi ;;
	g) if [[ -z  "$aaa_git_repo_dir" ]]; then
			Warn "/etc/aaa-master-config has no reference for aaa_git_repo_dir"
			Warn "if you continue your home repo will not be used "
			AnyKey
		else
			grepo=1
		fi ;;
	w) if [[ -z  "$aaa_work_repo_dir" ]]; then
			Warn "/etc/aaa-master-config has no reference for aaa_work_repo_dir"
			Warn "if you continue your work repo will not be used "
			AnyKey
		else
			wrepo=1
		fi ;;
	u) update=1 ;;
	q) quiet=1 ;;
	c) check=1 
		quiet=0;;
	G) git_build=1 ;;
   \?) Fuck "Invalid option: -$OPTARG" ;;
    :) Fuck "Option -$OPTARG requires a distro name, kali,stable,unstable,testing or ubuntu" ;;
  esac
done

#sort vars


if [[ $git_build -eq 1 ]]; then 
	if [[ $new_distro ]]; then
		SwitchDistro "$new_distro"
		aaa_component="$aaa_debian_distro"git
	else
		aaa_component="$aaa_default_distro"git
	fi
else
	if [[ $new_distro ]]; then
		SwitchDistro "$new_distro"
		aaa_component="$aaa_debian_distro"
	else
		aaa_component="$aaa_default_distro"
		rm -f "$HOME/.pbuilderrc"
	fi
fi

Debug "aaa_component=$aaa_component"
		
#shift the options and args out the way http://wiki.bash-hackers.org/howto/getopts_tutorial
shift $((OPTIND-1))
#and lets parse it

[[ -z $1 ]] && Fuck "need directory target"




########## end of common header #############################################################################################################################################

[[ "$(id -u)" != "0" ]] && Fuck "This script must be run as root"

function Stamp()
{
	
	local version=$(dpkg-parsechangelog --show-field Version)

	 dch -v "$version$aaa_debian_distro" --force-distribution --distribution "$aaa_debian_distro" "this change is an automated stamp \
of the package to show which distro it was built under , \
no changes are made except version number addition \
which has the host distro tagged to the end"
 
	
}
	
	
	#check script dependencies
	CheckMyDeps "reprepro pbuilder dpkg-source dpkg-parsechangelog"
	[[ $aaa_setup_build_base_complete == yes ]] || Fuck "this script needs the base build environment setup, run aaa_setup-build-base"
	[[ $aaa_setup_build_env_complete == yes ]] || Fuck "this script needs the build environment setup, run aaa-setup-build-env"


for target in $@; do
	[[ -d $target/debian ]] || Fuck "target dir does not contain a debian subdir"
	
	if [[ $quiet -eq 1 ]]; then
	
		#setup working dirs
		CleanMyBuildArea > /dev/null 2>&1 || exit 3
		
		#update / create base immage
		if [[ -e "$aaa_base_gz_dir/$aaa_base_gz" ]]; then
			if [[ $update -eq 1 ]]; then
				pbuilder --update > /dev/null 2>&1 || exit 3
			fi
		else
			if [[ $update -eq 1 ]]; then
				pbuilder --create > /dev/null 2>&1 || exit 4
			fi
		fi
	
		
		# build  source package
		cp -R -p "$target" "$aaa_work_dir/$target" > /dev/null 2>&1 || exit 4
		cp -R -p *.orig.tar.gz "$aaa_work_dir" > /dev/null 2>&1 || exit 4
		cd "$aaa_work_dir"
		if [[ $new_distro ]]; then
			cd "$target"
			Stamp
			cd ..
		fi
		
		dpkg-source -b "$target" 2>&1 || exit 7
		
		pbuilder --build *.dsc 2>&1 || exit 8
		
		cd "$aaa_build_result" 2>&1 || exit 9
		
		[[ hrepo -eq 1 ]] && AutoIncludeHome
		[[ grepo -eq 1 ]] && AutoIncludeGit
		[[ wrepo -eq 1 ]] && AutoIncludeWork
	
		
		ls *.deb
		
	
	else
	
		#setup working dirs
		CleanMyBuildArea
		
		#update / create base immage
		[[ $update -eq 1 ]] && UpdateBase
		
		
		# build  source package
		Test cp -R -p "$target" "$aaa_work_dir/$target"
		Test cp -R -p *.orig.tar.gz "$aaa_work_dir"
		cd "$aaa_work_dir"
		if [[ $new_distro ]]; then
			cd "$target"
			Stamp
			cd ..
		fi
		
		
		
		if [[ $check -ne 1 ]]; then
			Test dpkg-source -b "$target"
			Test pbuilder --build *.dsc
		
			cd "$aaa_build_result"
			[[ hrepo -eq 1 ]] && AutoIncludeHome
			[[ grepo -eq 1 ]] && AutoIncludeGit
			[[ wrepo -eq 1 ]] && AutoIncludeWork
		else
			dpkg-source -b "$target"
			if [[ $? -ne 0 ]]; then
				Fuck "Failed to build package, error"
			else
				Info "$target bulilds from source correcly"
			fi
		fi
	
		
	fi
	
done

