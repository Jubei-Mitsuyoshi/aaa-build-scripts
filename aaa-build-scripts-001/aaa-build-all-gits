#!/bin/bash

################ common header identical except for usage, getopts etc #########################################################################################################

cd "$HOME"

Usage() {
  cat <<EOF
usage: ${0##*/} [options] </path/to/pkg/dir>
   
   -l < list all gits from selected github page
    to the current dir >
    
   -c < clone all gits from selected github page
    to the current dir >
    
    -b < build all git -- INTERNAL SEE MY CODE __>
   
   
  This script performs various git admin actions
  

EOF
}



if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

# get options and arguments http://wiki.bash-hackers.org/howto/getopts_tutorial

while getopts ":lcb" opt; do
  case $opt in
	l) list=1 ;;
	c) clone=1 ;;
	b) build=1 ;;
   \?) Fuck "Invalid option: -$OPTARG" ;;
    :) Fuck "Option -$OPTARG requires a distro name, kali,stable,unstable,testing or ubuntu" ;;
  esac
done
#shift the options and args out the way http://wiki.bash-hackers.org/howto/getopts_tutorial
shift $((OPTIND-1))
#and lets parse it



current_donot_build_list="aaa-admin-scripts \
aaa-arch-devtools \
aaa-arch-install-scripts \
aaa-archlinux-pacman \
aaa-build-scripts \
aaa-debian-repo \
aaa-env aaa-eudev \
aaa-namcap \
aaa-nemo-actions \
aaa-network-manager-applet"




if [[ $list -eq 1 ]]; then
	[[ -z $1 ]] && echo "need github owner name"
	[[ -z $1 ]] && exit 1
	lynx -dump -listonly https://github.com/$1?tab=repositories | grep 'stargazers' | sed -r 's/^.{6}//' | sed 's/\/stargazers//' || echo "lynx failed to get list, either internet glitch or nonexistant gihub account name passed "
	exit 0
fi

if [[ $clone -eq 1 ]]; then
	[[ -z $1 ]] && echo "need github owner name"
	[[ -z $1 ]] && exit 1
	for repo_url in `lynx -dump -listonly https://github.com/$1?tab=repositories | grep 'stargazers' | sed -r 's/^.{6}//' | sed 's/\/stargazers//'`; do
		repo_name=$(sed "s/https:\/\/github.com\/$1\///" $repo_url)
		Test git clone "$repo_url".git
	done
	exit 0
fi

# ls -d aaa* >> /root/git/github/aaa-build-scripts/aaa-build-scripts-001/aaa-build-all-gits
#InList $repo_name $1 && 

if [[ $build -eq 1 ]]; then

cd /root/git/github/aaa-archlinux-pacman
(aaa-build -culg archlinux-pacman-4.1.2)
wait
(aaa-build -lg -d kali archlinux-pacman-4.1.2)
wait

cd /root/git/github/aaa-compiz
(aaa-build -clgw compiz-0.9.10+13.10.20131011)
wait
(aaa-build -lg -d kali compiz-0.9.10+13.10.20131011)
wait

cd /root/git/github/aaa-cpyrit-cuda
(aaa-build -clg cpyrit-cuda-0.4.0-git20131223)
wait
(aaa-build -lg -d kali cpyrit-cuda-0.4.0-git20131223)
wait

cd /root/git/github/aaa-emerald
(aaa-build -clg emerald-0.9.5-0)
wait
(aaa-build -lg -d kali emerald-0.9.5-0)
wait

cd /root/git/github/aaa-fontconfig-infinality
(aaa-build -clg fontconfig-infinality-1-2)
wait
(aaa-build -lg -d fontconfig-infinality-1-2)
wait

cd /root/git/github/aaa-freetype-infinality
(aaa-build -clg freetype-infinality_2.4.9-3)
wait
(aaa-build -lg -d kali freetype-infinality_2.4.9-3)
wait

cd /root/git/github/aaa-galternatives
(aaa-build -clg galternatives-0.13.5)
wait
(aaa-build -lg -d kali galternatives-0.13.5)
wait

cd /root/git/github/aaa-gdebi
(aaa-build -clg gdebi-0.9.1)
wait
(aaa-build -lg -d kali gdebi-0.9.1)
wait


cd /root/git/github/aaa-pup-volume-monitor
(aaa-build -clg gdebi-0.9.1)
wait
(aaa-build -lg -d kali gdebi-0.9.1)
wait


cd /root/git/github/aaa-pyrit
(aaa-build -clg pyrit-0.4.0-git20131223)
wait
(aaa-build -lg -d kali pyrit-0.4.0-git20131223)
wait



cd /root/git/github/aaa-timeshift
(aaa-build -clg timeshift-1.2.7)
wait
(aaa-build -lg -d kali timeshift-1.2.7)
wait


cd /root/git/github/aaa-winexe
(aaa-build -clg winexe-1.1~20130620kali4)
wait
(aaa-build -lg -d kali winexe-1.1~20130620kali4)
wait


cd /root/git/github/aaa-xarchiver
(aaa-build -clg xarchiver-0.5.2+20130119+dfsg-3)
wait
(aaa-build -lg -d kali xarchiver-0.5.2+20130119+dfsg-3)
wait

fi
